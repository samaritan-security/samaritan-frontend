{"ast":null,"code":"var _jsxFileName = \"/Users/sabatoosi/Desktop/492/samaritan-frontend/samaritan/src/components/identificationList/identificationList.tsx\";\nimport React from \"react\";\nimport { Avatar, Typography } from \"antd\";\nimport { KnownHandler } from \"../../api/known-handler\";\nimport { UnknownHandler } from \"../../api/unknown-handler\";\nconst Title = Typography.Title;\n\nclass IdentificationList extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      known: [],\n      unknown: []\n    };\n\n    this.componentDidMount = () => {\n      const type = this.props.type; //if this list displays known people, make request to fetch\n      //names/pics here.\n\n      if (type == \"known\") {\n        new KnownHandler().getAllKnown().then(data => {\n          this.setState({\n            known: data\n          });\n        });\n      } //otherwise, this list displays unknown faces, get those pictures.\n      else {\n          new UnknownHandler().getAllUnknown().then(data => {\n            this.setState({\n              unknown: data\n            });\n          });\n        }\n    };\n\n    this.getKnownRow = known => {\n      let img = \"data:image/png;base64,\" + known.img;\n      return React.createElement(\"div\", {\n        style: {\n          display: \"block\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(Avatar, {\n        icon: \"user\",\n        style: {\n          display: \"inline-block\",\n          margin: 10\n        },\n        src: img,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        style: {\n          display: \"inline-block\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, known.name));\n    };\n\n    this.getUnknownRow = unknown => {\n      let img = \"data:image/png;base64,\" + unknown.img;\n      return React.createElement(\"div\", {\n        style: {\n          display: \"block\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(Avatar, {\n        icon: \"user\",\n        size: 64,\n        style: {\n          display: \"inline-block\",\n          marginTop: 10,\n          marginLeft: 30\n        },\n        src: img,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }));\n    };\n\n    this.getKnownList = data => {\n      return React.createElement(React.Fragment, null, data.map(known => this.getKnownRow(known)));\n    };\n\n    this.getUnknownList = data => {\n      return React.createElement(React.Fragment, null, data.map(unknown => this.getUnknownRow(unknown)));\n    };\n  }\n\n  render() {\n    const _this$state = this.state,\n          known = _this$state.known,\n          unknown = _this$state.unknown;\n    const _this$props = this.props,\n          title = _this$props.title,\n          type = _this$props.type;\n    return React.createElement(React.Fragment, null, React.createElement(Title, {\n      level: 4,\n      style: {\n        margin: 20\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, title), type == \"known\" ? this.getKnownList(known) : this.getUnknownList(unknown));\n  }\n\n}\n\nexport default IdentificationList;","map":{"version":3,"sources":["/Users/sabatoosi/Desktop/492/samaritan-frontend/samaritan/src/components/identificationList/identificationList.tsx"],"names":["React","Avatar","Typography","KnownHandler","UnknownHandler","Title","IdentificationList","Component","state","known","unknown","componentDidMount","type","props","getAllKnown","then","data","setState","getAllUnknown","getKnownRow","img","display","margin","name","getUnknownRow","marginTop","marginLeft","getKnownList","map","getUnknownList","render","title"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,UAAjB,QAAmC,MAAnC;AACA,SAASC,YAAT,QAA6B,yBAA7B;AACA,SAASC,cAAT,QAA+B,2BAA/B;MAGQC,K,GAAUH,U,CAAVG,K;;AAYR,MAAMC,kBAAN,SAAiCN,KAAK,CAACO,SAAvC,CAGE;AAAA;AAAA;AAAA,SACAC,KADA,GACQ;AACNC,MAAAA,KAAK,EAAE,EADD;AAENC,MAAAA,OAAO,EAAE;AAFH,KADR;;AAAA,SAMAC,iBANA,GAMoB,MAAM;AAAA,YAChBC,IADgB,GACP,KAAKC,KADE,CAChBD,IADgB,EAGxB;AACA;;AACA,UAAIA,IAAI,IAAI,OAAZ,EAAqB;AACnB,YAAIT,YAAJ,GAAmBW,WAAnB,GAAiCC,IAAjC,CAAsCC,IAAI,IAAI;AAC5C,eAAKC,QAAL,CAAc;AACZR,YAAAA,KAAK,EAAEO;AADK,WAAd;AAGD,SAJD;AAKD,OAND,CAOA;AAPA,WAQK;AACH,cAAIZ,cAAJ,GAAqBc,aAArB,GAAqCH,IAArC,CAA0CC,IAAI,IAAI;AAChD,iBAAKC,QAAL,CAAc;AACZP,cAAAA,OAAO,EAAEM;AADG,aAAd;AAGD,WAJD;AAKD;AACF,KA1BD;;AAAA,SA4BAG,WA5BA,GA4BeV,KAAD,IAAkB;AAC9B,UAAIW,GAAG,GAAG,2BAA2BX,KAAK,CAACW,GAA3C;AAEA,aACE;AAAK,QAAA,KAAK,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,KAAK,EAAE;AAAEA,UAAAA,OAAO,EAAE,cAAX;AAA2BC,UAAAA,MAAM,EAAE;AAAnC,SAFT;AAGE,QAAA,GAAG,EAAEF,GAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAME;AAAG,QAAA,KAAK,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAwCZ,KAAK,CAACc,IAA9C,CANF,CADF;AAUD,KAzCD;;AAAA,SA2CAC,aA3CA,GA2CiBd,OAAD,IAAsB;AACpC,UAAIU,GAAG,GAAG,2BAA2BV,OAAO,CAACU,GAA7C;AAEA,aACE;AAAK,QAAA,KAAK,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,IAAI,EAAE,EAFR;AAGE,QAAA,KAAK,EAAE;AAAEA,UAAAA,OAAO,EAAE,cAAX;AAA2BI,UAAAA,SAAS,EAAE,EAAtC;AAA0CC,UAAAA,UAAU,EAAE;AAAtD,SAHT;AAIE,QAAA,GAAG,EAAEN,GAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAUD,KAxDD;;AAAA,SA0DAO,YA1DA,GA0DgBX,IAAD,IAAmB;AAChC,aAAO,0CAAGA,IAAI,CAACY,GAAL,CAASnB,KAAK,IAAI,KAAKU,WAAL,CAAiBV,KAAjB,CAAlB,CAAH,CAAP;AACD,KA5DD;;AAAA,SA8DAoB,cA9DA,GA8DkBb,IAAD,IAAqB;AACpC,aAAO,0CAAGA,IAAI,CAACY,GAAL,CAASlB,OAAO,IAAI,KAAKc,aAAL,CAAmBd,OAAnB,CAApB,CAAH,CAAP;AACD,KAhED;AAAA;;AAiEAoB,EAAAA,MAAM,GAAG;AAAA,wBACoB,KAAKtB,KADzB;AAAA,UACCC,KADD,eACCA,KADD;AAAA,UACQC,OADR,eACQA,OADR;AAAA,wBAEiB,KAAKG,KAFtB;AAAA,UAECkB,KAFD,eAECA,KAFD;AAAA,UAEQnB,IAFR,eAEQA,IAFR;AAGP,WACE,0CACE,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAE,CAAd;AAAiB,MAAA,KAAK,EAAE;AAAEU,QAAAA,MAAM,EAAE;AAAV,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGS,KADH,CADF,EAIGnB,IAAI,IAAI,OAAR,GACG,KAAKe,YAAL,CAAkBlB,KAAlB,CADH,GAEG,KAAKoB,cAAL,CAAoBnB,OAApB,CANN,CADF;AAUD;;AA9ED;;AAiFF,eAAeJ,kBAAf","sourcesContent":["import React from \"react\";\nimport { Avatar, Typography } from \"antd\";\nimport { KnownHandler } from \"../../api/known-handler\";\nimport { UnknownHandler } from \"../../api/unknown-handler\";\nimport { Known, Unknown } from \"../../api/api-types\";\n\nconst { Title } = Typography;\n\ninterface IIdentificationListProps {\n  type: string;\n  title?: string;\n}\n\ninterface IIdentificationListState {\n  known: Known[];\n  unknown: Unknown[];\n}\n\nclass IdentificationList extends React.Component<\n  IIdentificationListProps,\n  IIdentificationListState\n> {\n  state = {\n    known: [],\n    unknown: []\n  };\n\n  componentDidMount = () => {\n    const { type } = this.props;\n\n    //if this list displays known people, make request to fetch\n    //names/pics here.\n    if (type == \"known\") {\n      new KnownHandler().getAllKnown().then(data => {\n        this.setState({\n          known: data\n        });\n      });\n    }\n    //otherwise, this list displays unknown faces, get those pictures.\n    else {\n      new UnknownHandler().getAllUnknown().then(data => {\n        this.setState({\n          unknown: data\n        });\n      });\n    }\n  };\n\n  getKnownRow = (known: Known) => {\n    let img = \"data:image/png;base64,\" + known.img;\n\n    return (\n      <div style={{ display: \"block\" }}>\n        <Avatar\n          icon=\"user\"\n          style={{ display: \"inline-block\", margin: 10 }}\n          src={img}\n        />\n        <p style={{ display: \"inline-block\" }}>{known.name}</p>\n      </div>\n    );\n  };\n\n  getUnknownRow = (unknown: Unknown) => {\n    let img = \"data:image/png;base64,\" + unknown.img;\n\n    return (\n      <div style={{ display: \"block\" }}>\n        <Avatar\n          icon=\"user\"\n          size={64}\n          style={{ display: \"inline-block\", marginTop: 10, marginLeft: 30 }}\n          src={img}\n        />\n      </div>\n    );\n  };\n\n  getKnownList = (data: Known[]) => {\n    return <>{data.map(known => this.getKnownRow(known))}</>;\n  };\n\n  getUnknownList = (data: Unknown[]) => {\n    return <>{data.map(unknown => this.getUnknownRow(unknown))}</>;\n  };\n  render() {\n    const { known, unknown } = this.state;\n    const { title, type } = this.props;\n    return (\n      <>\n        <Title level={4} style={{ margin: 20 }}>\n          {title}\n        </Title>\n        {type == \"known\"\n          ? this.getKnownList(known)\n          : this.getUnknownList(unknown)}\n      </>\n    );\n  }\n}\n\nexport default IdentificationList;\n"]},"metadata":{},"sourceType":"module"}